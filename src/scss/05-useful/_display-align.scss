/* Usefull - Display Align */
////
/// @group UsefullClasses-Display_Align
/// Usefull - Display Align

///
$common-values: stretch center flex-start flex-end initial inherit;
$self-values: auto baseline;
$items-values: normal start end baseline;
$content-values: space-between space-around space-evenly;

@mixin align($name, $values) {
    @each $value in $values {
        &-#{$name}-#{$value}
        {
            align-#{$name}: #{$value};
        }
    }
  }

@mixin top($direction)
{
    @if $direction == column
    { 
        justify-content: flex-start; 
    }
    @else if $direction == column-reverse {
        justify-content: flex-end;
    }
    @else
    {
        align-items: flex-start;
    }
}

@mixin bottom($direction)
{
    @if $direction == column
    { 
        justify-content: flex-end; 
    }
    @else if $direction == column-reverse {
        justify-content: flex-start;
    }
    @else
    {
        align-items: flex-end;
    }
}

@mixin vCenter($direction)
{
    @if $direction == column or $direction == column-reverse {
        justify-content: center;
    }
    @else
    {
        align-items: center;
    }
}

@mixin bottom($direction)
{
    @if $direction == column
    { 
        justify-content: flex-end; 
    }
    @else if $direction == column-reverse {
        justify-content: flex-start;
    }
    @else
    {
        align-items: flex-end;
    }
}

@mixin left($direction)
{
    @if $direction == row
    { 
        justify-content: flex-start; 
    }
    @else if $direction == row-reverse {
        justify-content: flex-end;
    }
    @else
    {
        align-items: flex-start;
    }
}

@mixin hCenter($direction)
{
    @if $direction == row or $direction == row-reverse {
        justify-content: center;
    }
    @else
    {
        align-items: center;
    }
}

@mixin right($direction)
{
    @if $direction == row
    { 
        justify-content: flex-end; 
    }
    @else if $direction == row-reverse {
        justify-content: flex-start;
    }
    @else
    {
        align-items: flex-end;
    }
}

@mixin flexPositions($direction)
{
    #{if(&, '&.top-left', '.top-left')} {
        @include top($direction);
        @include left($direction);
    }
    
    #{if(&, '&.top-center', '.top-center')} {
        @include top($direction);
        @include hCenter($direction);
    }
    
    #{if(&, '&.top-right', '.top-right')} {
        @include top($direction);
        @include right($direction);
    }
    
    #{if(&, '&.center-left', '.center-left')} {
        @include vCenter($direction);
        @include left($direction);
    }
    
    #{if(&, '&.center-right', '.center-right')} {
        @include vCenter($direction);
        @include right($direction);
    }
    
    #{if(&, '&.bottom-left', '.bottom-left')} {
        @include bottom($direction);
        @include left($direction);
    }
    
    #{if(&, '&.bottom-center', '.bottom-center')} {
        @include bottom($direction);
        @include hCenter($direction);
    }
    
    #{if(&, '&.bottom-right', '.bottom-right')} {
        @include bottom($direction);
        @include right($direction);
    }
}

///
.align {
    @include align(self, join($common-values, $self-values));
    @include align(items, join($common-values, $items-values));
    @include align(content, join($common-values, $content-values));
}

///
.flex-direction-column
{
    @include flexPositions(column);
}

///
.flex-direction-column-reverse
{
    @include flexPositions(column-reverse);
}

///
.flex-direction-row-reverse
{
    @include flexPositions(row-reverse);
}

///
@include flexPositions(row);

///
:is(.center, .center-center)
{
    @include vCenter(row);
    @include hCenter(row);
}
